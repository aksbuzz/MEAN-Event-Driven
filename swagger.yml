openapi: 3.0.0
info:
  title: Blog App
  description: A blog app
  version: 1.0.0
servers:
  - url: http://localhost/api
tags:
  - { name: Users, description: Operations related to user management }
  - { name: Posts, description: Operations related to posts management }
  - { name: Comments, description: Operations related to comments management }

paths:
  /users/current:
    get:
      summary: Get current user details
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          email:
                            type: string
                            format: email
                          id:
                            type: string
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'

  /users/auth/signin:
    post:
      summary: Sign in user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '200':
          description: User signin successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthSuccess'
        '400':
          description: Bad request - Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'

        '404':
          description: Not found - user with given email does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

  /users/auth/signup:
    post:
      summary: Sign up user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '200':
          description: User signin successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuthSuccess'
        '400':
          description: Bad request - Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'

        '409':
          description: Conflict - Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUserConflict'

  /comments/:
    post:
      summary: Create comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: 'Awesome post!'
                postId:
                  type: string
                  example: '1234567890'
              required:
                - content
                - postId
      responses:
        '200':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentSuccess'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'

  /comments/{id}:
    put:
      summary: Update comment
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '1234567890'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: 'Awesome post!'
                postId:
                  type: string
                  example: '1234567890'
              required:
                - content
                - postId
      responses:
        '200':
          description: Comment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentSuccess'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'

        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

        '401':
          description: Not authorized to update comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'

  /posts/:
    get:
      summary: Get all posts
      tags:
        - Posts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostSuccess'

  /posts/{id}:
    get:
      summary: Get post
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '1234567890'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSuccess'

    put:
      summary: Update post
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '1234567890'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: 'Awesome post!'
                content:
                  type: string
                  example: 'Awesome post! content'
              required:
                - title
                - content
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSuccess'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'

        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorNotFound'

        '401':
          description: Not authorized to update post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'

  /posts:
    post:
      summary: Create post
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: 'Awesome post!'
                content:
                  type: string
                  example: 'Awesome post! content'
              required:
                - title
                - content
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSuccess'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'

components:
  schemas:
    UserSignup:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email
          example: user@example.com
        password:
          type: string
          description: User's password (min 4, max 20 characters)
          minLength: 4
          maxLength: 20
          example: password123
      required:
        - email
        - password

    UserAuthSuccess:
      type: object
      properties:
        data:
          type: object
          properties:
            token:
              type: string

    CommentSuccess:
      type: object
      properties:
        data:
          type: object
          properties:
            content:
              type: string
              example: 'Awesome post!'
            postId:
              type: string
              example: '1234567890'
            userId:
              type: string
              example: '1234567890'
            id:
              type: string
              example: '1234567890'

    PostSuccess:
      type: object
      properties:
        data:
          type: object
          properties:
            title:
              type: string
              example: 'Awesome post!'
            content:
              type: string
              example: 'Awesome post! content'
            userId:
              type: string
              example: '1234567890'
            id:
              type: string
              example: '1234567890'
            comments:
              type: array
              items:
                $ref: '#/components/schemas/CommentSuccess'

    ErrorUnauthorized:
      type: object
      properties:
        code:
          type: string
          example: 'NOT_AUTHORIZED'
        message:
          type: string
          example: 'Authentication token is invalid. User not found.'
        status:
          type: integer
          example: 401
        data:
          type: object

    ErrorNotFound:
      type: object
      properties:
        code:
          type: string
          example: 'NOT_FOUND'
        message:
          type: string
          example: 'Entity not found'
        status:
          type: integer
          example: 404
        data:
          type: object
          example: {}

    ErrorBadRequest:
      type: object
      properties:
        code:
          type: string
          example: 'BAD_REQUEST'
        message:
          type: string
          example: 'Validation errors'
        status:
          type: integer
          example: 400
        data:
          type: object
          example: { fields: { field1: 'Field1 is required', field2: 'Field2 is required' } }

    ErrorUserConflict:
      type: object
      properties:
        code:
          type: string
          example: 'CONFLICT'
        message:
          type: string
          example: 'User with this email already exists'
        status:
          type: integer
          example: 409
        data:
          type: object
          example: {}

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
